CREATE DATABASE TAGOREDE;
USE TAGOREDE;
CREATE TABLE DEPARTMENT(
DEPT_ID INT PRIMARY KEY,
DEPT_NAME VARCHAR(50) NOT NULL);

CREATE TABLE EMPLOYEE(
EMP_ID INT PRIMARY KEY,
EMP_NAME VARCHAR(100),
DEPT_iD INT,
SALARY DECIMAL(10,2),
HIRE_DATE DATE,
FOREIGN KEY (DEPT_iD) REFERENCES DEPARTMENT(DEPT_ID));

INSERT INTO DEPARTMENT VALUES(1,'HR'),(2,'IT'),(3,'FINANCE');
INSERT INTO EMPLOYEE VALUES(101, 'ALICE', 1, 50000.00, '2022-01-15');
INSERT INTO EMPLOYEE VALUES(102, 'BOB', 2, 70000.00, '2021-07-01');
SELECT * FROM DEPARTMENT;
SELECT * FROM EMPLOYEE;
UPDATE EMPLOYEE SET SALARY = SALARY+5000 WHERE EMP_ID=101;
SELECT * FROM EMPLOYEE;
BEGIN;
UPDATE EMPLOYEE SET SALARY=SALARY+1000 WHERE DEPT_ID=1;
SAVEPOINT SP;
COMMIT;
SELECT * FROM EMPLOYEE;

CREATE TABLE CUSTOMERS(
CUSTOMERID INT PRIMARY KEY,
CUSTOMERNAME VARCHAR(100) UNIQUE NOT NULL,
EMAIL VARCHAR(100) UNIQUE,
COUNTRY VARCHAR(50) NULL,
CREATEDAT TIMESTAMP DEFAULT CURRENT_TIMESTAMP);

CREATE TABLE ORDERS(
ORDERID INT PRIMARY KEY,
ORDERDATE DATE NOT NULL,
CUSTOMERID INT,
AMOUNT DECIMAL (10,2) CHECK (AMOUNT>0),
FOREIGN KEY(CUSTOMERID) REFERENCES CUSTOMERS(CUSTOMERID));

CREATE TABLE USERS(
USERID INT AUTO_INCREMENT PRIMARY KEY,
USERNAME VARCHAR(50) UNIQUE NOT NULL,
EMAIL VARCHAR(100) UNIQUE NOT NULL,
PASSWORDHASH VARCHAR(255) NOT NULL,
FIRSTNAME VARCHAR(50),
LASTNAME VARCHAR(50),
DOB DATE,
CREATEDAT DATETIME DEFAULT CURRENT_TIMESTAMP,
LASTLOGIN DATETIME,
STATUS ENUM('ACTIVE','INACTIVE','SUSPENDED'),
INDEX (EMAIL)
);

CREATE TABLE PRODUCT(
PR_ID INT PRIMARY KEY,
PR_PRICE INT,
EXP_DATE DATE);
INSERT INTO PRODUCT VALUES(1,800,'2025-01-07');
START TRANSACTION;
SAVEPOINT POINT;
INSERT INTO PRODUCT VALUES(2,400,'2027-04-03');
ROLLBACK TO POINT;
COMMIT;
SELECT * FROM PRODUCT;
SELECT * FROM EMPLOYEE WHERE EMP_NAME LIKE 'a%';
SELECT * FROM PRODUCT ORDER BY PR_PRICE;
SELECT * FROM PRODUCT ORDER BY PR_PRICE DESC;

CREATE TABLE ORDERDETAILS(
ORDER_ID INT,
PRODUCT_ID INT,
QUANTITY INT,
PRIMARY KEY (ORDER_ID,PRODUCT_ID));
SELECT * FROM ORDERDETAILS;
DROP TABLE ORDERDETAILS;
SELECT MIN(PR_PRICE) FROM PRODUCT;
SELECT COUNT(PR_ID) FROM PRODUCT WHERE PR_PRICE > 350;
SELECT COUNT(DISTINCT PR_PRICE) FROM PRODUCT;
CREATE TABLE Students (
    StudentID INT PRIMARY KEY,
    StudentName VARCHAR(255),
    DateOfBirth DATE,
    Gender VARCHAR(10),
    Major VARCHAR(50),
    GPA DECIMAL(3, 2)
);
ALTER TABLE STUDENTS DROP COLUMN GENDER;
SELECT * FROM STUDENTS;
drop TABLE STUDENTS;
CREATE TABLE students (
 id INT PRIMARY KEY,
 name VARCHAR(50),
 age INT,
 gender VARCHAR(10),
 marks INT,
 city VARCHAR(50)
);
INSERT INTO students (id, name, age, gender, marks, city) VALUES
(1, 'Alice', 20, 'Female', 85, 'Delhi'),
(2, 'Bob', 22, 'Male', 67, 'Mumbai'),
(3, 'Charlie', 23, 'Male', 92, 'Delhi'),
(4, 'Daisy', 21, 'Female', 74, 'Kolkata'),
(5, 'Evan', 20, 'Male', 89, 'Chennai'),
(6, 'Fiona', 22, 'Female', 95, 'Mumbai');

SELECT name, age FROM students;
SELECT DISTINCT city FROM students;
SELECT * FROM students WHERE gender = 'Male';
SELECT * FROM students WHERE marks > 80;
SELECT * FROM students WHERE age BETWEEN 20 AND 22;
SELECT * FROM students WHERE city = 'Delhi';
SELECT * FROM students WHERE name LIKE 'A%';
SELECT * FROM students ORDER BY marks DESC;
SELECT * FROM students LIMIT 3;
SELECT COUNT(*) AS total_students FROM students;
SELECT AVG(marks) AS average_marks FROM students;
SELECT MAX(marks) AS highest_marks FROM students;
SELECT * FROM students ORDER BY age ASC LIMIT 1;
SELECT COUNT(DISTINCT city) AS unique_cities FROM students;
SELECT gender, COUNT(*) AS count FROM students GROUP BY gender;
SELECT city, AVG(marks) AS average_marks FROM students GROUP BY city;
SELECT gender, MAX(marks) AS top_marks FROM students GROUP BY gender;






 

